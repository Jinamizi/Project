package ui;

import java.awt.Cursor;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

public class ScanningPanel extends javax.swing.JPanel {

    GUITimer timer = new GUITimer();

    /**
     * Creates new form scanningPanel
     */
    public ScanningPanel() {
        initComponents();
        addMouseListener(timer);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        printLabel = new javax.swing.JLabel();

        jLabel1.setText("Scan fingerprint");

        printLabel.setBackground(new java.awt.Color(255, 255, 255));
        printLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        printLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void printLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printLabelMouseClicked
        String filePath = getPath();
        setIcon(new ImageIcon(filePath));

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String id = getIdForPrint(ImageIO.read(new File(filePath)));
            setCursor(null);
            processResponse(id);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this.getParent(), ex.getMessage());
            ex.printStackTrace();
        } finally {
            setCursor(null);
            reset();
        }
    }//GEN-LAST:event_printLabelMouseClicked

    private void processResponse(String response) {
        if (response.equals("")) {
            JOptionPane.showMessageDialog(this.getParent(), "Print not found");
            return;
        } else if (response.startsWith("ERROR")) {
            JOptionPane.showMessageDialog(this.getParent(), response, "Error", JOptionPane.INFORMATION_MESSAGE);
            CustomerFrame.showPanel(CustomerFrame.WELCOME_PANEL);
            return;
        }

        authenticate(response);
    }

    private String getPassword() {
        JPasswordField passwordField = new JPasswordField();
        JOptionPane pane = new JOptionPane();
        pane.setMessage(passwordField);

        JDialog dialog = pane.createDialog(this.getParent(), "Enter password");
        dialog.setModal(true);
        dialog.setVisible(true);
        dialog.dispose();

        String password = String.valueOf(passwordField.getPassword());
        return password;
    }

    public void authenticate(String id) {
        for (int trials = 0; trials < 3; trials++) {
            String password = getPassword();
            String result = verifyCustomer(id, password);
            
            if (result.equalsIgnoreCase("EXIST")) {
                CustomerFrame.showPanel(CustomerFrame.ACTION_PANEL);
                CustomerFrame.setCustomerId(id);
                break;
            } else if (result.equalsIgnoreCase("NOT FOUND")) {
            } else {
                JOptionPane.showMessageDialog(this.getParent(), result, "Error", JOptionPane.INFORMATION_MESSAGE);
                CustomerFrame.showPanel(CustomerFrame.WELCOME_PANEL);
            }
        }
    }

    private String verifyCustomer(String id, String password) {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String result;
        try {
            result = ClientConnector.verifyCustomer(id, password);
        } catch (IOException ex) {
            CustomerFrame.showPanel(CustomerFrame.WELCOME_PANEL);
            result = "ERROR:" + ex.getMessage();
            ex.printStackTrace();
        }
        setCursor(null);
        return result;
    }

    /**
     * prompts for the path of the print
     *
     * @return the path of the selected print
     */
    private String getPath() {
        JFileChooser fileChooser = new PictureChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.CANCEL_OPTION) {
            return null;
        }
        File fileName = fileChooser.getSelectedFile(); //get file
        //display error if invalid
        if ((fileName == null) || (fileName.getName().equals(""))) {
            JOptionPane.showMessageDialog(this, "Invalid Name", "error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return fileName.getPath();
    }

    private void setIcon(ImageIcon img) {
        SwingUtilities.invokeLater(() -> {
            Image image = img.getImage().getScaledInstance(printLabel.getWidth(), printLabel.getHeight(), Image.SCALE_SMOOTH);
            printLabel.setIcon(new ImageIcon(image));
        });

    }

    private String getIdForPrint(BufferedImage image) throws IOException {
        return ClientConnector.getIdForPrint(image);
    }

    /**
     * sets the print label to null
     */
    public void reset() {
        printLabel.setIcon(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel printLabel;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] s) {
        JFrame frame = new JFrame("Scanning panel");
        frame.add(new ScanningPanel());
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
} //200
