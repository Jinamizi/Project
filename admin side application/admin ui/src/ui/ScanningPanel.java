/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Cursor;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @author DEGUZMAN
 */
public class ScanningPanel extends java.awt.Panel {

    private String id = "";
    private BufferedImage print;
    Thread submitThread;

    /**
     * Creates new form ScanningPanel
     */
    public ScanningPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fingerprintLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();

        fingerprintLabel.setBackground(new java.awt.Color(255, 255, 255));
        fingerprintLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        fingerprintLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fingerprintLabelMouseClicked(evt);
            }
        });

        jLabel1.setText("Scan fingerprint");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        jPanel1.add(submitButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(fingerprintLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fingerprintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        //submitThread = new Thread(this::checkIfFingerprintExist);
        //submitThread.start();
        checkIfFingerprintExist();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void fingerprintLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fingerprintLabelMouseClicked
        String s = getPath();
        if (s == null) {
            return;
        }

        setIcon(new ImageIcon(s));

        try {
            print = ImageIO.read(new File(s));
        } catch (IOException ex) {
            return;
        }
        id = s;
        submitButton.setEnabled(true);
    }//GEN-LAST:event_fingerprintLabelMouseClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fingerprintLabel.setIcon(null);
        if (submitThread.isAlive())submitThread.interrupt();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void checkIfFingerprintExist() {
        submitButton.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        try {
            String response = Connector.checkIfPrintExist(print);
            processResponse(response);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this.getParent(), ex.getMessage(), "Info", JOptionPane.INFORMATION_MESSAGE);
            AdminFrame.getAddPanel().showPanel(AddPanelController.SCANNING_PANEL);
        } finally{
            submitButton.setEnabled(true);
            setCursor(null);
        }
    }

    private void processResponse(String response) {
        if (response.equalsIgnoreCase("DONT EXIST")) {
            AdminFrame.getAddPanel().showPanel(AddPanelController.DETAILS_PANEL);
        } else if (response.equalsIgnoreCase("EXIST")) {
            try {
                String idFound = getIDForPrint();
                customerExistOptions(idFound);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this.getParent(), ex.getMessage(), "Info", JOptionPane.ERROR_MESSAGE);
                AdminFrame.getAddPanel().showPanel(AddPanelController.SCANNING_PANEL);
            }
        } else {
            System.err.println(response);
            JOptionPane.showMessageDialog(this.getParent(), response, "Info", JOptionPane.INFORMATION_MESSAGE);
            AdminFrame.getAddPanel().showPanel(AddPanelController.SCANNING_PANEL);
        }
    }

    private String getIDForPrint() throws IOException {
        return Connector.getID(print);
    }

    public void customerExistOptions(String id) {
        try {
            String message = "Customer Exist\n";
            message += "Name: " + Arrays.toString(getNames(id));
            message += "\nAccounts: " + Arrays.toString(getAccounts(id));
            message += "\nAdd account?";
            int choice = JOptionPane.showConfirmDialog(this.getParent(), message, "info", JOptionPane.OK_CANCEL_OPTION);
            
            if (choice == JOptionPane.OK_OPTION)
                AdminFrame.getAddPanel().showPanel(AddPanelController.ADD_ACCOUNT_PANEL);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this.getParent(), ex.getMessage());
        }
    }

    private String[] getAccounts(String id) throws IOException {
        Map<String, String> map = Connector.getAccountBalances(id);
        return map.keySet().toArray(new String[map.size()]);
    }

    private String[] getNames(String id) throws IOException {
        Map<String, String> map = Connector.getNames(id);
        ArrayList<String> names = new ArrayList<>();
        map.keySet().forEach((item) -> names.add(map.get(item)));
        return names.toArray(new String[map.size()]);
    }

    public void showAddAccount() {
        String id = "sssssss"; //Connector.getID(print);
        String[] accounts = {"A122", "A33"}; //Connector.getAccounts(id);

        JOptionPane.showConfirmDialog(this, "Customer Exist\nID number: " + id + "\nAccounts: " + Arrays.toString(accounts), "Info", JOptionPane.YES_NO_OPTION);
    }

    private void setIcon(ImageIcon img) {
        SwingUtilities.invokeLater(() -> {
            Image image = img.getImage();
            image = image.getScaledInstance(fingerprintLabel.getWidth(), fingerprintLabel.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(image);
            fingerprintLabel.setIcon(icon);
        });
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }

    public void setPrint(BufferedImage print) {
        this.print = print;
    }
    
    public BufferedImage getPrint() {
        return print;
    }

    private String getPath() {
        JFileChooser fileChooser = new PictureChooser();

        int result = fileChooser.showOpenDialog(null);

        //if user clicked Cancel button on dialog, return
        if (result == JFileChooser.CANCEL_OPTION) {
            return null;
        }

        File fileName = fileChooser.getSelectedFile(); //get file

        //display error if invalid
        if ((fileName == null) || (fileName.getName().equals(""))) {
            JOptionPane.showMessageDialog(this, "Invalid Name", "error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        return fileName.getPath();
    }

    public JLabel getFingerprintLabel() {
        return fingerprintLabel;
    }

    public JButton getSubmitButton() {
        return submitButton;
    }

    public static void main(String[] arg) {
        JFrame frame = new JFrame();
        frame.add(new ScanningPanel());
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel fingerprintLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
} //170
